buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.4.RELEASE")
	}
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'java-library'
apply plugin: 'eclipse'

sourceCompatibility = '1.8'
group = 'com.chestermere.lake.temperature'
version = '0.0.1-SNAPSHOT'

configurations {
	shade
	compile.extendsFrom shade
}

bootJar {
	mainClassName = 'com.chestermere.lake.temperature.Application'
	baseName = 'Server-Handler'
	version =  version
	manifest {
		attributes 'Start-Class': mainClassName
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {

	// Spring
	implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.3.RELEASE')

	// Reflections
	implementation (group: 'org.reflections', name: 'reflections', version: '0.9.12')

	// Google Guava
	implementation (group: 'com.google.guava', name: 'guava', version: '28.2-jre')

	// Google Gson
	implementation (group: 'com.google.code.gson', name: 'gson', version: '2.8.6')

	// Google Flogger
	shade (group: 'com.google.flogger', name: 'flogger-system-backend', version: '0.4')
	shade (group: 'com.google.flogger', name: 'flogger', version: '0.4')

	// Joda-Time
	implementation (group: 'joda-time', name: 'joda-time', version: '2.10.5')

	// H2 Database
	implementation (group: 'com.h2database', name: 'h2', version: '1.4.200')

	// JUnit
	testImplementation (group: 'junit', name: 'junit', version: '4.13')

	// Configurations and Apache is annoying.
	compile 'org.apache.commons:commons-configuration2:2.6'
	compile 'org.apache.commons:commons-lang3:3.9'
	compile 'commons-logging:commons-logging:1.2'
	compile 'commons-beanutils:commons-beanutils:1.9.4'
	compile 'commons-codec:commons-codec:1.14'
	compile 'commons-jxpath:commons-jxpath:1.3'
	compile 'org.apache.commons:commons-jexl:2.1.1'

	// Spring tests
	testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.2.3.RELEASE')

}

jar {
	configurations.shade.each {dep ->
		from (project.zipTree(dep)) {
			exclude 'META-INF', 'META-INF/**'
		}
	}
}
